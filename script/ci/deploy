#!/bin/bash

set -e # Exit with nonzero exit code if anything fails

# Pull requests shouldn't try to deploy
if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    echo "[CI] Skipping deploy"
    exit 0
fi

# Clear deploy/ content
function cleanDeploy {
    echo "[CI] Cleaning up contents from deploy directory"
    rm -rf deploy/**/*
}

# Git informations
echo "[CI] Get the SHA of the commit we are deploying"
GH_SHA=`git rev-parse --verify HEAD`

# Raw branch checkout
echo "[CI] Cloning the repository in deploy directory (without master checkout)"
git clone --quiet --no-checkout ${GH_REPO} deploy
echo "[CI] Checking out the raw branch"
cd deploy
git checkout --quiet ${GH_RAW_BRANCH} || git checkout --quiet --orphan ${GH_RAW_BRANCH}
cd ..

# Clean deploy existing contents
cleanDeploy

# Build
echo "[CI] Jekyll build"
bundle exec jekyll build -d deploy/

# Do we deploy ?
echo "[CI] Check if it's worth to deploy"
cd deploy
# Continue the deploy if there are more file changes than what is set as deploy threshold
git diff --name-only > filenames.diff
filechanges=`cat filenames.diff | wc -l`
if [ $filechanges -lt $DEPLOY_THRESHOLD ]; then
    echo "[CI] No meaningful changes detected; deploy aborted"
    # exit 0
fi
# Convert the filenames into urls in a JSON array to purge CF cache later on
bundle exec ruby script/ci/jsondiff.rb
rm filenames.diff

# Raw build push
echo "[CI] Commit and push the raw build"
git config user.name ${GH_USERNAME}
git config user.email ${GH_EMAIL}
git add --all .
git commit -m "Deployment ${GH_SHA}"
git push ${GH_REPO} ${GH_RAW_BRANCH}
cd ..

# Save raw build (but not hidden files such as .git dir)
mkdir -p deploy_raw
cp -r deploy/* deploy_raw

# Clean deploy in case the target branch doesn't exists
cleanDeploy

# Target branch checkout
echo "[CI] Checking out the target branch"
cd deploy
git checkout --quiet ${GH_TARGET_BRANCH} || git checkout --quiet --orphan ${GH_TARGET_BRANCH}
cd ..

# Clean deploy in case the target branch does exists and copy back the raw build
cleanDeploy
cp -r deploy_raw/* deploy

# Compress using Gulp
echo "[CI] Gulp run"
npm run gulp

# Final build push
echo "[CI] Commit and push the final build"
cd deploy
git config user.name ${GH_USERNAME}
git config user.email ${GH_EMAIL}
git add --all .
git commit -m "Deployment ${GH_SHA}"
git push --quiet ${GH_REPO} ${GH_TARGET_BRANCH}
cd ..

# Sleep 30s before purging the CF cache
sleep 30s
curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" -H "X-Auth-Email: ${CF_AUTH_EMAIL}" -H "X-Auth-Key: ${CF_AUTH_KEY}" -H "Content-Type: application/json" --data @urls_to_purge.json
